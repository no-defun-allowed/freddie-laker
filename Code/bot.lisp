(in-package :freddie-laker)

(defclass connection-state ()
  ((finished-handshake-p :initform nil :accessor finished-handshake-p)
   (received-heartbeat-p :initform nil :accessor received-heartbeat-p)
   (heartbeat-interval :initform 10000 :accessor heartbeat-interval)
   (last-sequence :initform :null :accessor last-sequence)))

(defclass bot ()
  ((token :initarg :token :reader token)
   (on-message :initform #'print :initarg :on-message :reader on-message)
   (connection-state :accessor connection-state)
   (heartbeat-actor :accessor heartbeat-actor)
   (watchdog-actor :accessor watchdog-actor)
   (defer-actor :accessor defer-actor)
   (running-p :initform nil :accessor running-p)
   (connection :accessor connection)
   (user-id :accessor user-id)))
(defmethod initialize-instance :after ((bot bot) &key)
  (setf (heartbeat-actor bot) (make-instance 'actor :action 'heartbeat-action :bot bot)
        (watchdog-actor bot) (make-instance 'actor :action 'watchdog-action :bot bot)
        (defer-actor bot)(make-instance 'actor :action 'defer-action :bot bot)))

;;; Actors
(defclass actor ()
  ((mailbox :reader mailbox)
   (thread :reader thread)
   (action :initarg :action :reader action)
   (bot :initarg :bot :reader bot)))
(defmethod initialize-instance :after ((actor actor) &key)
  (setf (slot-value actor 'mailbox) (safe-queue:make-mailbox)
        (slot-value actor 'thread) (bt:make-thread (lambda () (funcall (action actor) actor)))))

(defun send-actor (actor message)
  (safe-queue:mailbox-send-message (mailbox actor) message))
(defmacro receive ((actor &key timeout) &body body)
  `(case (safe-queue:mailbox-receive-message (mailbox ,actor) :timeout ,timeout)
     ,@body))
